
if [ -z $HOSTNAME ] && [ -f /etc/hostname ]; then
	export HOSTNAME="$(cat /etc/hostname)"
fi

export TMP="$HOME/tmp"
export TEMP="$TMP"
export TMPDIR="$TMP"
export TMPPREFIX="${TMPDIR}/zsh"
export TMUX_TMPDIR="${TMPDIR}/tmux-${HOST}-${UID}"
[ -d "${TMP}" ] || mkdir "${TMP}"
[ -d "${TMUX_TMPDIR}" ] || mkdir -p "${TMUX_TMPDIR}"

export keysdir=$HOME/ident
export KEYSDIR=$keysdir
[ -d "$keysdir" ] || mkdir -m 700 "$keysdir"

export GNUPGHOME="$keysdir/.gnupg"
[ -d $GNUPGHOME ] || mkdir -m 700 "$GNUPGHOME"

export GPG_TTY=$(tty)
export PASSWORD_STORE_ENABLE_EXTENSIONS=true

## Homebrew
case "${OSTYPE}" in
linux*) brew_path="/home/linuxbrew/.linuxbrew" ;;
darwin*) brew_path="/opt/homebrew" ;;
esac
if [[ -f "${brew_path}/bin/brew" ]]; then
	eval "$("${brew_path}"/bin/brew shellenv)"
fi

# GUIX
if [ -L "$HOME/.guix-profile" ]; then
	GUIX_PROFILE="/home/ru/.guix-profile"
	. "$GUIX_PROFILE/etc/profile"
fi

export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale

# export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
# export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
# export GIT_SSL_CAINFO="$SSL_CERT_FILE"
# export CURL_CA_BUNDLE="$SSL_CERT_FILE"

if [ -L "$HOME/.config/guix/current" ]; then
	export GUIX_PROFILE="/home/ru/.config/guix/current"
	[ -f $GUIX_PROFILE/etc/profile ] && . $GUIX_PROFILE/etc/profile
fi

# export GUIX_LOCPATH="$GUIX_PROFILE"/lib/locale

appendToPath "$HOME"/.config/guix/current/bin
appendToPath "$HOME"/.guix-profile/bin

### Programming languages.
## GO
export GOROOT="/usr/local/go"
export GOPATH="${XDG_DATA_HOME:-$HOME/.local/share}/go"
export GOBIN="$GOPATH/bin"
appendToPath "$GOROOT/bin"
appendToPath "$GOBIN"

## Python Environment Manager
export CONDA_ROOT="${XDG_DATA_HOME:-$HOME/.local/share}/miniconda3"
export CONDARC="${XDG_CONFIG_HOME:-$HOME/.config}/conda/.condarc"
case "${OSTYPE}" in
linux*) CONDA_EXE="${CONDA_ROOT}/bin/conda" ;;
darwin*) CONDA_EXE="" ;;
esac
if [[ -f $CONDA_EXE ]]; then
	eval "$("${CONDA_EXE}" "shell.zsh" "hook")"
fi

export PYTHONSTARTUP="$XDG_CONFIG_HOME"/python/pythonrc

## RUST
export CARGO_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/cargo"
export RUSTUP_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/rustup"
prependToPath "$CARGO_HOME/bin"

#R
export R_HOME=/usr/lib/R
export R_PROFILE_USER="$XDG_CONFIG_HOME/R/Rprofile"

#PERL
export PERL_CPANM_HOME="$XDG_CACHE_HOME"/cpanm

#CUDA
export CUDA_CACHE_PATH="$XDG_CACHE_HOME"/nv
export __GL_SHADER_DISK_CACHE_PATH="$XDG_CACHE_HOME"/nv

export DOTNET_CLI_HOME="$XDG_DATA_HOME"/dotnet

#NODE
export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
export NPM_CONFIG_CACHE=$XDG_CACHE_HOME/npm

export NODE_REPL_HISTORY="$XDG_DATA_HOME"/node_repl_history

## Node Environment Managers
# FastNodeManager in Rust "https://github.com/Schniz/fnm"
# if programExists fnm; then
# 	eval "$(fnm env --use-on-cd)"
# fi

# NodeVersionManage "https://github.com/nvm-sh/nvm"
function _nvm_init(){
	unalias nvm npm node
	export NVM_DIR=${XDG_DATA_HOME:-$HOME/.local/share}/nvm
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
}
alias nvm='_nvm_init; nvm'
alias npm='_nvm_init; npm'
alias node='_nvm_init; node'

# bun
export BUN_INSTALL="$XDG_DATA_HOME/bun"
appendToPath "$BUN_INSTALL/bin"
# bun completions
[ -s "$BUN_INSTALL/_bun" ] && source "$BUN_INSTALL/_bun"

## Ruby
export RBENV_ROOT=${XDG_DATA_HOME:-$HOME/.local/share}/rbenv
# if programExists rbenv; then
# 	eval "$(rbenv init - n)"
# fi

## Haskel
# [ -f "/home/ru/.ghcup/env" ] && source "/home/ru/.ghcup/env" # ghcup-env

# Julia
# export JULIA_DEPOT_PATH="$XDG_DATA_HOME/julia:$JULIA_DEPOT_PATH"

# if dirExists ${XDG_DATA_HOME}/dotnet; then
#   DOTNET_ROOT=${XDG_DATA_HOME}/dotnet
#   export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
# else
#   DOTNET_ROOT=""
# fi
# export DOTNET_ROOT

# PATH
BIN_HOME=$HOME/bin
for d in $(find "$BIN_HOME" -maxdepth 1 -type d); do
	appendToPath "$d"
done
# export PATH="$PATH:${$(find ~/.local/bin -maxdepth 1 -type d -printf %p:)%%:}"

appendToPath "$HOME"/bin
prependToPath "$HOME"/.local/bin
# appendToPath "/usr/games"

appendToPath "$HOME"/.cache/lm-studio/bin

# export ZSH_PLUGINS_ALIAS_TIPS_TEXT="Alias: "
# export ZSH_TMUX_AUTOSTART='false'
# export ZSH_TMUX_AUTOSTART_ONCE='false'
# export ZSH_TMUX_AUTOCONNECT='false'
# export DISABLE_AUTO_TITLE='true'

export JUPYTER_CONFIG_DIR="$XDG_CONFIG_HOME/jupyter"

export MPLAYER_HOME="$XDG_CONFIG_HOME"/mplayer

export SQLITE_HISTORY="$XDG_CACHE_HOME"/sqlite_history

export W3M_DIR="$XDG_DATA_HOME"/w3m

# export LC_ALL=ru_RU.UTF-8
# export LANG=ru_RU.UTF-8
# export LANGUAGE=ru_RU.UTF-8

# export LD_LIBRARY_PATH=$HOME/miniconda3/envs/JupyterSystemEnv/lib:$LD_LIBRARY_PATH
# export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

#Ibus settings
#type ibus-setup in terminal to change settings and start the daemon
#delete the hashtags of the next lines and restart
#export GTK_IM_MODULE=ibus
#export XMODIFIERS=@im=dbus
#export QT_IM_MODULE=ibus

# export TERMINAL="alacritty"
# export FILE=ranger
# export TERM=xterm-256color

if programExists w3m; then
	export BROWSER=w3m
elif programExists lynx; then
	export BROWSER=lynx
fi

# if  dirExists ${GITHOME}/autodoc; then
#   AUTODOCPATH=${GITHOME}/autodoc
# else
#   [[ $echoWarning == 1 ]] && echo "WARNING: autodoc is not installed."
#   AUTODOCPATH=""
# fi
# export AUTODOCPATH

# if dirExists ${GITHOME}/docbld; then
#   DOCBLDPATH=${GITHOME}/docbld
# else
#   [[ $echoWarning == 1 ]] && echo "WARNING: docbld is not installed."
#   DOCBLDPATH=""
# fi
# export DOCBLDPATH

# if dirExists ${GITHOME}/newdoc; then
#    NEWDOCPATH=${GITHOME}/newdoc
# else
#    [[ $echoWarning == 1 ]] && echo "WARNING: newdoc is not installed."
#   NEWDOCPATH=""
# fi
# export NEWDOCPATH
#
# if [[ -d ${NEWDOCPATH} ]]; then
#   newdoc() {
#     ${NEWDOCPATH}/newdoc "$@"
#   }
# fi

#export VIMRUNTIME=/usr/share/nvim/runtime

if programExists nvim; then
	EDITOR=$(which nvim)
elif programExists vim; then
	EDITOR=$(which vim)
fi
export EDITOR

export VISUAL="nvim"
export PAGER="less -R"
export READER="zathura"
export SYSTEMD_EDITOR=$EDITOR

export MANPAGER="less -R --use-color -Dd+r -Du+b"
export MANWIDTH=76

# export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'
# Fzf
# export FZF_DEFAULT_COMMAND='fd --hidden --follow --exclude=.git --exclude=node_modules'
# export FZF_COMPLETION_TRIGGER=','
# export FZF_DEFAULT_OPTS="
# --layout=reverse --info=inline --height=80% --multi --cycle --margin=1 --border=rounded
# --preview '([[ -f {} ]] && (bat --style=numbers --color=always --line-range=:500 {} || cat {})) || ([[ -d {} ]] \
# && (exa -TFl --group-directories-first --icons --git -L 2 --no-user {} | less)) || echo {} 2> /dev/null | head -200'
# --prompt=' ' --pointer='>' --marker='✔'
# --color='hl:148,hl+:154,prompt:blue,pointer:032,marker:010,bg+:000,gutter:000'
# --preview-window=right:65%
# --bind '?:toggle-preview'
# --bind 'ctrl-a:select-all'
# --bind 'ctrl-y:execute-silent(echo {+} | clipcopy)'
# --bind 'ctrl-e:execute(nvim-qt {+})'
# --bind 'ctrl-v:execute(code {+})'"
#
# export FZF_CTRL_T_COMMAND='fd -t f -HF -E=.git -E=node_modules'
# export FZF_TMUX_OPTS='-p 90%'

# vim: ft=zsh syntax=sh
