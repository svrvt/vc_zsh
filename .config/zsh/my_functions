#!/bin/bash

# {{{ A check for the existence of a directory.

dirExists() {
	[[ -d "$1" ]]
}

# -------------------------------------------------------------------------- }}}
# {{{ A check for the existence of a file.

fileExists() {
	[[ -f "$1" ]]
}

# -------------------------------------------------------------------------- }}}
# {{{ A check for the host name.

hostName() {
	[[ ${HOSTNAME} = "$1" ]]
}

# -------------------------------------------------------------------------- }}}
# {{{ A check for the existence of a program on my path.

programExists() {
	which "$1" &>/dev/null
}

# -------------------------------------------------------------------------- }}}
# {{{ A check for the operating system type.

osType() {
	[[ ${OSTYPE} = "$1" ]]
}

# -------------------------------------------------------------------------- }}}
# {{{ Append to PATH

appendToPath() {
	if dirExists "$1"; then
		[[ ":$PATH:" != *"$1"* ]] && export PATH="${PATH}:$1"
	fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Prepend to PATH

prependToPath() {
	if dirExists "$1"; then
		[[ ":$PATH:" != *"$1"* ]] && export PATH="$1:${PATH}"
	fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Append to INFOPATH

appendToInfoPath() {
	if dirExists "$1"; then
		[[ ":$INFOPATH:" != *"$1"* ]] && export INFOPATH="${INFOPATH}:$1"
	fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Append to MANPATH

appendToManPath() {
	if dirExists "$1"; then
		[[ ":$MANPATH:" != *"$1"* ]] && export MANPATH="${MANPATH}:$1"
	fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Generating a new SSH key and adding it to the ssh-agent
#     https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

SSHHOME="$HOME/.ssh"
sshkeys() {
	if [[ -d ${SSHHOME} ]]; then
		eval "$(ssh-agent -s)"
		for key in $(command ls "$SSHHOME"/*.pub); do
			ssh-add -q "${key%.*}"
		done
	fi
}

sshlist() {
	ps aux | awk '/ssh-agent -s/'
}

sshme() {
	echo "My ssh-agent PID ${SSH_AGENT_PID}"
}

sshkill() {
	killall ssh-agent
}

latexmkkill() {
	for pid in $(ps aux | awk '/latexmk/ {print $2}'); do kill -9 "$pid"; done
	for pid in $(ps aux | awk '/perl/    {print $2}'); do kill -9 "$pid"; done
}

sshstart() {
	if programExists /etc/init.d/ssh; then
		sudo /etc/init.d/ssh start
	fi
}

sshstop() {
	if programExists /etc/init.d/ssh; then
		sudo /etc/init.d/ssh stop
	fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Use LaTeX make to generate a document.

pdf() {
	latexmk -pdf -verbose -file-line-error -synctex=1 -interaction=nonstopmode -cd "$1"
}

# -------------------------------------------------------------------------- }}}
# {{{ Archvie extractor

# ex = EXtractor for all kinds of archives
# usage: ex <file>

ex() {
	if [ -f "$1" ]; then
		case "$1" in
		*.tar.bz2) tar xjf "$1" ;;
		*.tar.gz) tar xzf "$1" ;;
		*.bz2) bunzip2 "$1" ;;
		*.rar) unrar x "$1" ;;
		*.gz) gunzip "$1" ;;
		*.tar) tar xf "$1" ;;
		*.tbz2) tar xjf "$1" ;;
		*.tgz) tar xzf "$1" ;;
		*.zip) unzip "$1" ;;
		*.Z) uncompress "$1" ;;
		*.7z) 7z x "$1" ;;
		*deb) ar x "$1" ;;
		*.tar.xz) tar xf "$1" ;;
		*.tar.zst) unzstd "$1" ;;
		*) echo "'$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# -------------------------------------------------------------------------- }}}

# man() {
# 	env \
# 		LESS_TERMCAP_mb="$(printf "\e[1;31m")" \
# 		LESS_TERMCAP_md="$(printf "\e[1;36m")" \
# 		LESS_TERMCAP_me="$(printf "\e[0m")" \
# 		LESS_TERMCAP_se="$(printf "\e[0m")" \
# 		LESS_TERMCAP_so="$(printf "\e[1;44;33m")" \
# 		LESS_TERMCAP_ue="$(printf "\e[0m")" \
# 		LESS_TERMCAP_us="$(printf "\e[1;32m")" \
# 		PAGER="${commands[less]:-$PAGER}" \
# 		NROFF_U=1 \
# 		PATH="$HOME/bin:$PATH" \
# 		man "$@"
# }

# export LESS_TERMCAP_mb=$'\E[01;31m'
# export LESS_TERMCAP_md=$'\E[01;31m'
# export LESS_TERMCAP_me=$'\E[0m'
# export LESS_TERMCAP_se=$'\E[0m'
# export LESS_TERMCAP_so=$'\E[01;44;33m'
# export LESS_TERMCAP_ue=$'\E[0m'
# export LESS_TERMCAP_us=$'\E[01;32m'

# Only show files which have $1 present in contents
fz() {
	local line
	line=$(rg "$1" | fzf) &&
		$EDITOR $(cut -d':' -f1 <<<"$line") +$(cut -d':' -f2 <<<"$line")
}

todos() {
	cd "$NOTES_ROOT" || return
	$EDITOR "$(rg -le '- \[ \]' --sort created | fzf)"
	cd - || return
}

unLock() {
	for pid in $(ps aux | awk 'apt {print $2}'); do
		kill -9 "$pid"
	done
}
# 	sudo lsof /var/lib/dpkg/lock
# 	sudo lsof /var/lib/apt/lists/lock
# 	sudo lsof /var/cache/apt/archives/lock
# 	sudo kill -9 PID
# 	sudo rm /var/lib/apt/lists/lock
# 	sudo rm /var/cache/apt/archives/lock
# 	sudo rm /var/lib/dpkg/lock
# 	sudo dpkg --configure -a
#
# 	sudo lsof /var/lib/dpkg/lock-frontend
# 	sudo kill -9 PID
# 	sudo rm /var/lib/dpkg/lock-frontend
# 	sudo dpkg --configure -a
# }

# Use the best version of pico installed
edit() {
	if [ "$(type -t nvim)" = "file" ]; then
		nvim "$@"
	elif [ "$(type -t nano)" = "file" ]; then
		nano -c "$@"
	elif [ "$(type -t pico)" = "file" ]; then
		pico "$@"
	fi
}
sv() {
	if [ "$(type -t nvim)" = "file" ]; then
		sudo -Es nvim "$@"
	elif [ "$(type -t nano)" = "file" ]; then
		sudo nano -c "$@"
	elif [ "$(type -t pico)" = "file" ]; then
		sudo pico "$@"
	fi
}

# Extracts any archive(s) (if unp isn't installed)
extract() {
	for archive in "$@"; do
		if [ -f "$archive" ]; then
			case $archive in
			*.tar.bz2) tar xvjf $"archeve" ;;
			*.tar.gz) tar xvzf $"archeve" ;;
			*.bz2) bunzip2 $"archeve" ;;
			*.rar) rar x $"archeve" ;;
			*.gz) gunzip $"archeve" ;;
			*.tar) tar xvf $"archeve" ;;
			*.tbz2) tar xvjf $"archeve" ;;
			*.tgz) tar xvzf $"archeve" ;;
			*.zip) unzip $"archeve" ;;
			*.Z) uncompress $"archeve" ;;
			*.7z) 7z x $"archeve" ;;
			*) echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

# Searches for text in all files in the current folder
ftext() {
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

# Copy and go to the directory
cpg() {
	if [ -d "$2" ]; then
		cp "$1" "$2" && cd "$2" || exit
	else
		cp "$1" "$2"
	fi
}

# Move and go to the directory
mvg() {
	if [ -d "$2" ]; then
		mv "$1" "$2" && cd "$2" || exit
	else
		mv "$1" "$2"
	fi
}

# Create and go to the directory
mkg() {
	mkdir -p "$1"
	cd "$1" || exit
}

# Goes up a specified number of directories  (i.e. up 4)
up() {
	local d=""
	limit=$1
	for ((i = 1; i <= limit; i++)); do
		d=$d/..
	done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
		d=..
	fi
	cd "$d" || exit
}

#Automatically do an ls after each cd
# cd ()
# {
# 	if [ -n "$1" ]; then
# 		builtin cd "$@" && ls
# 	else
# 		builtin cd ~ && ls
# 	fi
# }

# Returns the last 2 fields of the working directory
pwdtail() {
	pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}

##Show current network information
# if [ "$HOST" = vaio ]; then
# 	radio_adapter=wlp7s0
# 	lan_adapter=enp19s0
# elif [ "$HOST" = pcRU ]; then
# 	radio_adapter=wlx60e32716669c
# 	lan_adapter=enp2s0
# fi
#
# adapters=("$lan_adapter" "$radio_adapter")

# check_adapters() {
# 	source "$BIN_net"/check_adapters.sh
# 	# adapters=($lan_list $wan_list $docker_list)
# 	adapters=($lan_list $wan_list)
# }

check_adapters() {
	adapters=()
	while IFS= read -r line; do
		adapters+=("$line")
	done < <(command ls /sys/class/net | grep -Ev "^lo$")
}

netinfo() {
	check_adapters
	echo "--------------- Network Information ---------------"
	for m in "${adapters[@]}"; do
		echo "$m"
		# echo ""
		/sbin/ifconfig "$m" | awk /'inet / {print "IPV4: " $2}'
		# echo ""
		/sbin/ifconfig "$m" | awk /'broadcast / {print "BROADCAST: " $6}'
		# echo ""
		/sbin/ifconfig "$m" | awk /'inet / {print "NETMASK: " $4}'
		# echo ""
		/sbin/ifconfig "$m" | awk /'ether / {print "MAC: " $2}'
		# /sbin/ip link show "$m" | awk /'ether / {print "MAC: " $2 "\t " $4}'
		echo "---------------------------------------------------"
	done
}

# IP address lookup
function whatismyip() {
	check_adapters
	echo "--------------- Network Information ---------------"
	for m in "${adapters[@]}"; do
		echo "$m"
		echo -n "Internal IP: "
		ip -4 -o addr show "$m" | awk '{print $4}' | cut -d "/" -f 1
		echo "---------------------------------------------------"
	done
	echo -n "External IP: "
	dig @resolver4.opendns.com myip.opendns.com +short
	echo "---------------------------------------------------"
	##wget http://smart-ip.net/myip -O - -q
}

# GitHub Titus Additions

gcomp() {
	git add .
	git commit -m "$1"
	git push
}

#######

setEnv() {
	[[ -d "$1" ]] || python3 -m venv "$1"
	source "$1"/bin/activate
	[[ -f requirements.txt ]] && pip install -r requirements.txt
}

pyEnv() {
	if [ $# -eq 0 ]; then # Для работы скрипта необходим входной параметр.
		echo "Вызовите сценарий с номером версии: 3.x.y "
	fi

	PyEnvDir=$(pwd)
	PyVersionDir=$XDG_DATA_HOME/python/$1
	PySrcDir=$PyVersionDir
	PyBinDir=$PyVersionDir/bin
	PyVersion=python"${1%.*}"
	PyEnvName=venv"$1" #ошибка,если не venv в 3.6.9; в 3.5.7, 3.9.1 - норм

	if [[ ! -d $PyVersionDir ]]; then
		mkdir -p "$PyVersionDir"
	fi

	if [[ ! -d $PySrcDir ]]; then
		mkdir -p "$PySrcDir"
	fi
	if [[ ! -d $PyBinDir ]]; then
		cd "$PySrcDir" || exit
		wget http://www.python.org/ftp/python/"$1"/Python-"$1".tgz
		tar -zxvf Python-"$1".tgz
		rm -rf Python-"$1".tgz
		cd Python-"$1" || exit
		./configure --prefix="$PyVersionDir"
		make
		make install
		cd "$PyEnvDir" || exit
	fi
	# if [[ ! -d $PyEnvName ]]; then
	"$PyBinDir"/"$PyVersion" -m venv "$PyEnvName"
	# fi

	source "$PyEnvName"/bin/activate
}

fzf-surfraw() { surfraw "$(command cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sort -n | fzf -e)"; }

# start fuzzy finder frontend to greenclip
fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i)" | xclip -selection clipboard; }
# greenclip configuration settings
cfg-greenclip() {
	killall greenclip
	$EDITOR ~/.config/greenclip.cfg && nohup greenclip daemon >/dev/null 2>&1 &
}
# greenclip reload
rld-greenclip() {
	killall greenclip
	nohup greenclip daemon >/dev/null 2>&1 &
}
# greenclip clear history
derez-greenclip() {
	killall greenclip
	rm ~/.cache/greenclip.history && nohup greenclip daemon >/dev/null 2>&1 &
}

#-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# functions in zshrc
#
# Functions
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

run_under_tmux() {
	# Run $1 under session or attach if such session already exist.
	# $2 is optional path, if no specified, will use $1 from $PATH.
	# If you need to pass extra variables, use $2 for it as in example below..
	# Example usage:
	#   torrent() { run_under_tmux 'rtorrent' '/usr/local/rtorrent-git/bin/rtorrent'; }
	#   mutt() { run_under_tmux 'mutt'; }
	#   irc() { run_under_tmux 'irssi' "TERM='screen' command irssi"; }

	# There is a bug in linux's libevent...
	# export EVENT_NOEPOLL=1

	command -v tmux >/dev/null 2>&1 || return 1

	if [ -z "$1" ]; then return 1; fi
	local name="$1"
	if [ -n "$2" ]; then
		local execute="$2"
	else
		local execute="command ${name}"
	fi

	if tmux has-session -t "${name}" 2>/dev/null; then
		tmux attach -d -t "${name}"
	else
		tmux new-session -s "${name}" "${execute}" \; set-option status \; set set-titles-string "${name} (tmux@${HOST})"
	fi
}

irc() { run_under_tmux irssi "TERM='screen' command irssi"; }
#-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

view_csv() {
	if programExists tidy-viewer; then
		tidy-viewer "$1"
	else
		command cat "$1" | head -n 25 | column -ts,
		# command cat "$1" | column -t -s, | less -S
	fi
}
alias csv=view_csv

yt() {
	if programExists yt-dlp; then
		yt-dlp -o - "$1" | mpv -
	elif programExists youtube-dl; then
		youtube-dl -o - "$1" | mpv -
	else
		echo "no-no"
	fi
}

fzf_select_path() {
	sed "s%^${HOME}%~%" |
		fzf --select-1 --exit-0 --toggle-sort=ctrl-r \
			--preview='terminal-file-preview --image-preview {}' \
			--preview-window=right:60% "$@" |
		sed "s%^~%${HOME}%"
}

fzf_select_dir() {
	fzf_select_path "$@"
}

fzf_select_file() {
	fzf_select_path "$@"
}

path() { sed 's/:/\n/g' <<< $PATH; }

ew() {
	$EDITOR "$(which "$1")"
}
bindkey -s "e\t" "$EDITOR $(which !!)^M"

