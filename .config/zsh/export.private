#!/bin/zsh


# keysdir=~/keys

pass() {
	if [ $# -gt 0 ]; then
		for a in "$@"; do
			case $a in
			"otp")
				export PASSWORD_STORE_DIR=$keysdir/$a
				break
				a;;
			"api" | "token" | "ss" | "base" | "alpha")
				export PASSWORD_STORE_DIR=$keysdir/$a
				shift
				break
				;;
			esac
		done
	else
		export PASSWORD_STORE_DIR=$keysdir/base
	fi

	TOMB_FILE=$keysdir/.tombs/secrets.tomb
	TOMB_KEY=$keysdir/.tombkeys/secrets.tomb.key

	MOUNT_DIR=$keysdir/.mount_secrets

	[ -d "$PASSWORD_STORE_DIR" ] || mkdir -m 700 "$PASSWORD_STORE_DIR"

	if which tomb &>/dev/null && [ -f "$TOMB_FILE" ]; then
		if [ -z "$(command ls -A "$PASSWORD_STORE_DIR")" ]; then
			tomb open $TOMB_FILE -k $TOMB_KEY $MOUNT_DIR
		fi
	fi

	command pass "$@" ##2>/dev/null
}

_pass () {
	local cmd
	if (( CURRENT == 2 )); then
		local -a subdir;
		subdir=(
			"api:API keys"
			"token:Tokens"
			"ss:Recovery keys"
			"base:Base passwords"
			"alpha:Alpha passwords"
			"otp:OneTimePassword"
		)
		_describe -t commands 'pass' subdir

	elif (( CURRENT == 3 )); then
		cmd=${words[2]}
		# Set the context for t
		curcontext="${curcontext%:*:*}:pass-$cmd"
		# Narrow the range of words we are looking at to exclude `pass'
		(( CURRENT-- ))
		shift words
		_pass_complete_entries_helper -type f
	fi
}
compdef _pass _pass

_pass_complete_entries_helper () {
	local IFS=$'\n'
	local prefix

	case "${cmd}" in
		"api" | "token" | "ss" | "base" | "alpha" | "otp" )
			local PASSWORD_STORE_DIR=$HOME/keys/${cmd}
			;;
	esac
	zstyle -s ":completion:${curcontext}:" prefix prefix || prefix="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
	_values -C 'passwords' ${$(find -L "$prefix" \( -name .git -o -name .gpg-id \) -prune -o $@ -print 2>/dev/null | sed -e "s#${prefix}/\{0,1\}##" -e 's#\.gpg##' -e 's#\\#\\\\#g' -e 's#:#\\:#g' | sort):-""}
}

# zstyle ':completion:*:*:pass:*' tag-order 'api:API passwords' 'token:Token passwords' 'ss:SS passwords' 'base:Base passwords' 'alpha:Alpha passwords' 'otp:OTP passwords'



# which gh &>/dev/null && export GITHUB_TOKEN="$(pass token github)"

