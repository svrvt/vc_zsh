# Colors.
red='\e[0;31m'
RED='\e[1;31m'
green='\e[0;32m'
GREEN='\e[1;32m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
blue='\e[0;34m'
BLUE='\e[1;34m'
purple='\e[0;35m'
PURPLE='\e[1;35m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'


termtitle() {
    case "$TERM" in
        rxvt*|xterm*|nxterm|gnome|screen|screen-*|st|st-*)
            local prompt_host="${(%):-%m}"
            local prompt_user="${(%):-%n}"
            local prompt_char="${(%):-%~}"
            case "$1" in
                precmd)
                    printf '\e]0;%s@%s: %s\a' "${prompt_user}" "${prompt_host}" "${prompt_char}"
                ;;
                preexec)
                    printf '\e]0;%s [%s@%s: %s]\a' "$2" "${prompt_user}" "${prompt_host}" "${prompt_char}"
                ;;
            esac
        ;;
    esac
}

setup_git_prompt() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        unset git_prompt
        return 0
    fi

    local git_status_dirty git_status_stash git_branch

    if [ "$(git --no-optional-locks status --untracked-files='no' --porcelain)" ]; then
        git_status_dirty='%F{green}*'
    else
        unset git_status_dirty
    fi

    if [ "$(git stash list)" ]; then
        git_status_stash="%F{yellow}â–²"
    else
        unset git_status_stash
    fi

    git_branch="$(git symbolic-ref HEAD 2>/dev/null)"
    git_branch="${git_branch#refs/heads/}"

    if [ "${#git_branch}" -ge 24 ]; then
        git_branch="${git_branch:0:21}..."
    fi

    git_branch="${git_branch:-no branch}"

    git_prompt=" %F{blue}[%F{253}${git_branch}${git_status_dirty}${git_status_stash}%F{blue}]"

}

prompt_nvm() {
  local fnm_default
  fnm_default=$(fnm list | grep default | awk '{ print $2 }') || return
  local fnm_current=$(fnm current)
  [[ $fnm_default != $fnm_current ]] || return
  
  # nvm_prompt=" %F{blue}[%F{253}${fnm_current}%F{blue}]"
  nvm_prompt=" ${fnm_current}"
}
# subshell count
if [[ -z $ORIG_SHLVL ]]; then
	export ORIG_SHLVL=$SHLVL
fi
if [[ $SHLVL -gt $ORIG_SHLVL ]]; then
	# preprompt_parts+=("%F{yellow}[$(($SHLVL - $ORIG_SHLVL))]%f")
	deeps=("%F{cyan}[%F{purple}$(($SHLVL - $ORIG_SHLVL))%F{cyan}]%f")
fi

if [ -n "$GUIX_ENVIRONMENT" ]; then
  guix_prompt="%F{cyan}[%F{purple}guix%F{cyan}] "
fi
# nix shell
NIXSHELL=$(echo $PATH | tr ':' '\n' | grep '/nix/store' | sed 's#^/nix/store/[a-z0-9]\+-##' | \
sed 's#-[^-]\+$##' | xargs -n2 -d'\n')

if [ "$NIXSHELL" ]; then
  nix_prompt="%F{cyan}[%F{purple}nix: %F{253}$NIXSHELL%F{cyan}] "
fi



precmd() {
    # Set terminal title.
    termtitle precmd
    # Set optional git part of prompt.
    setup_git_prompt
}

preexec() {
    # Set terminal title along with current executed command pass as second argument
    termtitle preexec "${(V)1}"
}
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
over_ssh() {
    if [ -n "${SSH_CLIENT}" ]; then
        return 0
    else
        return 1
    fi
}
# Fancy prompt.
if over_ssh && [ -z "${TMUX}" ]; then
    prompt_is_ssh='%F{blue}[%F{red}SSH%F{blue}] '
elif over_ssh; then
    prompt_is_ssh='%F{blue}[%F{253}SSH%F{blue}] '
else
    unset prompt_is_ssh
fi

case $USER in
    root)
        PROMPT='%B%F{red}%n%B%F{reset_color}*%B%F{yellow}%m%k %(?..%F{blue}[%F{253}%?%F{blue}] )${prompt_is_ssh}%B%F{green}%1~${git_prompt}%F{blue} %B%F{red}%# %b%f%k'

        RPROMPT='%B%F{red}%n %B%F{green}%~'
    ;;

    *)  
        # PROMPT='%B%F{blue}%n@%m%k %(?..%F{blue}[%F{253}%?%F{blue}] )${prompt_is_ssh}%B%F{cyan}%1~${git_prompt}%F{cyan} %# %b%f%k'
        PROMPT='%B%F{red}%n%B%F{reset_color}*%B%F{blue}%m%k %(?..%F{blue}[%F{253}%?%F{blue}] )${prompt_is_ssh}%B%F{yellow}%1~${git_prompt}%F{cyan} '
        RPROMPT='${deeps} ${guix_prompt}${nix_prompt}%B%F{yellow}%~'

    ;;
esac
